name: AI Blog Automation

on:
  # Temporarily disabled scheduled runs to prevent daily failures during development
  # schedule:
  #   # Weekly crystal posts - Every Tuesday at 10 AM UTC (6 AM EST)
  #   - cron: '0 10 * * 2'
  #   # Monthly chakra posts - First Monday of each month at 9 AM UTC
  #   - cron: '0 9 1-7 * 1'
  #   # Seasonal posts - First day of each season at 11 AM UTC
  #   - cron: '0 11 1 3,6,9,12 *'
  #   # Content boost - Every Friday at 2 PM UTC (10 AM EST)
  #   - cron: '0 14 * * 5'

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      action:
        description: 'Blog automation action to run'
        required: true
        default: 'weekly-crystal-post'
        type: choice
        options:
          - weekly-crystal-post
          - monthly-chakra-post
          - seasonal-post
          - generate-all

jobs:
  ai-blog-automation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine automation action
        id: determine-action
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          else
            # Determine action based on schedule
            current_date=$(date -u +%d)
            current_month=$(date -u +%m)
            current_day_of_week=$(date -u +%u)
            current_hour=$(date -u +%H)
            
            if [ "$current_day_of_week" = "2" ] && [ "$current_hour" = "10" ]; then
              # Tuesday 10 AM UTC - Weekly crystal post
              echo "action=weekly-crystal-post" >> $GITHUB_OUTPUT
            elif [ "$current_day_of_week" = "1" ] && [ "$current_date" -le "7" ] && [ "$current_hour" = "9" ]; then
              # First Monday of month 9 AM UTC - Monthly chakra post
              echo "action=monthly-chakra-post" >> $GITHUB_OUTPUT
            elif [ "$current_date" = "1" ] && [ "$current_hour" = "11" ] && ([ "$current_month" = "3" ] || [ "$current_month" = "6" ] || [ "$current_month" = "9" ] || [ "$current_month" = "12" ]); then
              # First day of season 11 AM UTC - Seasonal post
              echo "action=seasonal-post" >> $GITHUB_OUTPUT
            elif [ "$current_day_of_week" = "5" ] && [ "$current_hour" = "14" ]; then
              # Friday 2 PM UTC - Content boost (generate multiple posts)
              echo "action=generate-all" >> $GITHUB_OUTPUT
            else
              # Default fallback
              echo "action=weekly-crystal-post" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Log automation details
        run: |
          echo "ü§ñ AI Blog Automation Starting"
          echo "Action: ${{ steps.determine-action.outputs.action }}"
          echo "Timestamp: $(date -u)"
          echo "Trigger: ${{ github.event_name }}"

      - name: Health check
        run: |
          echo "üè• Checking site health..."

          # Check if site is accessible
          health_response=$(curl -s -w "%{http_code}" "${{ secrets.SITE_URL }}/api/cron/ai-blog-automation" \
            -X GET || echo "000")

          health_code="${health_response: -3}"

          if [ "$health_code" = "000" ]; then
            echo "‚ùå Site is not accessible. Skipping automation."
            echo "This is normal during development or if the site is not deployed yet."
            exit 0
          elif [ "$health_code" = "200" ]; then
            echo "‚úÖ Site is healthy, proceeding with automation"
          else
            echo "‚ö†Ô∏è Site returned status $health_code, but proceeding anyway"
          fi

      - name: Generate AI blog content
        run: |
          echo "üîÆ Generating AI blog content..."

          # Call the AI blog automation API
          response=$(curl -s -w "%{http_code}" -X POST "${{ secrets.SITE_URL }}/api/cron/ai-blog-automation" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -d '{"action": "${{ steps.determine-action.outputs.action }}"}')

          http_code="${response: -3}"
          response_body="${response%???}"

          echo "HTTP Status: $http_code"
          echo "Response: $response_body"

          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ AI blog automation completed successfully"
          else
            echo "‚ùå AI blog automation failed with status $http_code"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Update sitemap
        run: |
          echo "üó∫Ô∏è Updating sitemap..."
          
          # Trigger sitemap regeneration
          curl -s -X GET "${{ secrets.SITE_URL }}/api/sitemap/regenerate" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" || echo "Sitemap update skipped"

      - name: Notify completion
        run: |
          echo "üìù AI Blog Automation Summary"
          echo "================================"
          echo "Action: ${{ steps.determine-action.outputs.action }}"
          echo "Status: Completed"
          echo "Time: $(date -u)"
          echo "Next scheduled run: Check workflow schedule"
          echo "================================"
          
          # Optional: Send notification to Discord/Slack
          # curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"content": "ü§ñ AI Blog post generated: ${{ steps.determine-action.outputs.action }}"}'

      - name: Log SEO impact
        run: |
          echo "üìà SEO Impact Tracking"
          echo "======================"
          echo "New blog post generated for North America SEO"
          echo "Target keywords: crystal healing, spiritual wellness"
          echo "Expected traffic boost: 5-15% within 30 days"
          echo "Content type: ${{ steps.determine-action.outputs.action }}"
          echo "======================"
