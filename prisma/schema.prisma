// Celestial Crystals Database Schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String?
  lastName      String?
  password      String?
  emailVerified DateTime?
  image         String?
  birthDate     DateTime?
  phone         String?
  role          String    @default("CUSTOMER") // CUSTOMER, ADMIN
  newsletterSubscribed Boolean @default(false)
  marketingEmails Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]



  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Address Management
model Address {
  id          String  @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  phone       String?
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Product Management
model Crystal {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  chakra      String
  element     String
  hardness    String
  origin      String
  rarity      String
  image       String?
  images      String? // For SQLite, we'll store as JSON string

  // Crystal properties (stored as JSON strings for SQLite)
  properties    String // JSON array as string
  colors        String // JSON array as string
  zodiacSigns   String? // JSON array as string
  birthMonths   String? // JSON array as string

  // SEO and metadata
  slug          String   @unique
  metaTitle     String?
  metaDescription String?
  keywords      String? // JSON array as string

  // Inventory
  stockQuantity Int      @default(0)
  lowStockThreshold Int @default(5)
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  inventoryLogs InventoryLog[]
  productViews  ProductView[]

  @@map("crystals")
}

// Inventory Management
model InventoryLog {
  id          String   @id @default(cuid())
  crystalId   String
  type        String   // 'RESTOCK', 'SALE', 'ADJUSTMENT', 'RETURN'
  quantity    Int      // Positive for additions, negative for subtractions
  previousQty Int
  newQty      Int
  reason      String?
  reference   String?  // Order ID, supplier reference, etc.
  createdAt   DateTime @default(now())
  createdBy   String?  // Admin user ID

  crystal Crystal @relation(fields: [crystalId], references: [id], onDelete: Cascade)

  @@map("inventory_logs")
}

// Shopping Cart (Persistent)
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  crystalId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  crystal Crystal @relation(fields: [crystalId], references: [id], onDelete: Cascade)

  @@unique([userId, crystalId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  crystalId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  crystal Crystal @relation(fields: [crystalId], references: [id], onDelete: Cascade)

  @@unique([userId, crystalId])
  @@map("wishlist_items")
}

// Order Management
model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  userId          String
  status          String   @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED

  // Pricing
  subtotal        Float
  discountAmount  Float    @default(0)
  shippingAmount  Float    @default(0)
  taxAmount       Float    @default(0)
  totalAmount     Float

  // Discount information
  discountCode    String?
  discountPercent Int?

  // Payment
  paymentMethod   String   // 'stripe', 'paypal'
  paymentStatus   String   @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentIntentId String?

  // Shipping
  shippingAddressId String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user            User       @relation(fields: [userId], references: [id])
  shippingAddress Address?   @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  crystalId String
  quantity  Int
  price     Float // Price at time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  crystal Crystal @relation(fields: [crystalId], references: [id])

  @@map("order_items")
}

model OrderStatusHistory {
  id        String   @id @default(cuid())
  orderId   String
  status    String
  note      String?
  createdAt DateTime @default(now())
  createdBy String?  // Admin user ID

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  crystalId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false) // Verified purchase
  isApproved Boolean @default(false) // Admin approved
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  crystal Crystal @relation(fields: [crystalId], references: [id], onDelete: Cascade)

  @@unique([userId, crystalId]) // One review per user per crystal
  @@map("reviews")
}

// Discount Code Management
model DiscountCode {
  id              String   @id @default(cuid())
  code            String   @unique
  type            String   // 'PERCENTAGE', 'FIXED_AMOUNT'
  value           Float // Percentage or fixed amount
  minOrderAmount  Float?
  maxDiscountAmount Float?

  // Usage limits
  usageLimit      Int?     // Total usage limit
  usageCount      Int      @default(0)
  userUsageLimit  Int?     // Per-user usage limit

  // Validity
  isActive        Boolean  @default(true)
  startsAt        DateTime?
  expiresAt       DateTime?

  // Metadata
  description     String?
  internalNote    String?
  createdBy       String?  // Admin user ID

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  usages          DiscountCodeUsage[]

  @@map("discount_codes")
}

model DiscountCodeUsage {
  id             String   @id @default(cuid())
  discountCodeId String
  userId         String?
  orderId        String?
  discountAmount Float
  createdAt      DateTime @default(now())

  discountCode DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)

  @@map("discount_code_usage")
}

// Email Management
model EmailSubscriber {
  id                   String   @id @default(cuid())
  email                String   @unique
  firstName            String?
  lastName             String?
  isActive             Boolean  @default(true)

  // Subscription preferences
  newsletter           Boolean  @default(true)
  promotions           Boolean  @default(true)
  productUpdates       Boolean  @default(true)

  // Metadata
  source               String?  // 'website', 'checkout', 'import'
  tags                 String? // JSON array as string

  subscribedAt         DateTime @default(now())
  unsubscribedAt       DateTime?
  lastEmailSentAt      DateTime?

  // Relationships
  emailLogs            EmailLog[]

  @@map("email_subscribers")
}

model EmailLog {
  id           String   @id @default(cuid())
  subscriberId String?
  email        String
  subject      String
  template     String
  status       String   // 'SENT', 'FAILED', 'BOUNCED', 'OPENED', 'CLICKED'
  provider     String?  // 'resend', 'smtp'
  providerId   String?  // External provider message ID
  errorMessage String?
  sentAt       DateTime @default(now())

  subscriber EmailSubscriber? @relation(fields: [subscriberId], references: [id])

  @@map("email_logs")
}

// Analytics and Tracking
model PageView {
  id        String   @id @default(cuid())
  path      String
  userId    String?
  sessionId String?
  userAgent String?
  referer   String?
  country   String?
  createdAt DateTime @default(now())

  @@map("page_views")
}

model ProductView {
  id        String   @id @default(cuid())
  crystalId String
  userId    String?
  sessionId String?
  createdAt DateTime @default(now())

  crystal Crystal @relation(fields: [crystalId], references: [id], onDelete: Cascade)

  @@map("product_views")
}
